[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "datacompy_report",
    "section": "",
    "text": "pip install datacompy-report"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "datacompy_report",
    "section": "How to use",
    "text": "How to use\n\nCreate ‘datacompy.core.Compare’ object\nInstantiate a new datacompy_report.DatacompyReport object\nCreate Report:\n\nExcel format\nmore to come…"
  },
  {
    "objectID": "datacompy_report.html",
    "href": "datacompy_report.html",
    "title": "DatacompyReport",
    "section": "",
    "text": "source\n\nDatacompyReport\n\n DatacompyReport (compare_instance)\n\nA class to modify the output of a datacompy instance and add reporting functionality\n\n\n\n\nDetails\n\n\n\n\ncompare_instance\na datacompy.core.Compare instance\n\n\n\n\nsource\n\n\nDatacompyReport.prepare_compare_results\n\n DatacompyReport.prepare_compare_results ()\n\nReformats the Datacompy output to display all column differences found for matches between the two DataFrames based on the keys compare.join_columns\n\nsource\n\n\nDatacompyReport.create_excel_report\n\n DatacompyReport.create_excel_report (write_file:str,\n                                      use_names_in_headers:bool=True)\n\nCreate Excel workbook with nicely formatted output comparing two DataFrames\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwrite_file\nstr\n\nfull path + filename where the Excel file is to be created\n\n\nuse_names_in_headers\nbool\nTrue\nif True, replaces df1 and df2 with Comapre.df1_name, Comapre.df2_name\n\n\nReturns\nNone\n\nExcel workbook written at write_file location\n\n\n\n\n\nCreate Test Data\n\ndata1 = \"\"\"id,col1_string,col2_string,col3_int,col4_float,col5_string\n010,g1,g1-duck,1,1.0,r1\n110,g1,g1-dog,2,2.1,r1\n210,g2,g2-duck,3,3.2,r2\n310,g2,g2-dog,4,4.3,r2\n410,g1,g1-goat,5,5.4,r1\n510,,g1-dog,6,6.5,r1\n610,g2,g2-dog,7,7.6,r2\n710,g2,g2-duck,8,8.7,r2\n810,g1,g1-dog,9,9.8,r1\n811,g1,g1-duck,10,10.9,r1\n812,g1,g1-duck,11,11.0,r1\"\"\"\n\ndata2 = \"\"\"id,col1_string,col2_string,col3_int,col4_float,col6_string\n010,g1,g1-duck,1,1.0,z1\n110,g2,g2-duck,2,2.1,z2\n210,g2,g2-duck,4,3.3,z2\n310,g1,g1-dog,3,4.5,z1\n410,g1,g1-dog,5,5.9,z1\n510,g1,g1-dog,6,6.5,z2\n610,g2,g2-goat,7,,z2\n710,g2,g2-duck,8,8.7,z1\n810,g1,g1-dog,9,9.8,z1\n911,g2,g2-dog,10,10.91,z2\n912,g2,g2-dog,11,11.01,z2\n922,g1,g1-duck,12,11.1,z2\n\"\"\"\n\ndf1 = pandas.read_csv(StringIO(data1))\ndf2 = pandas.read_csv(StringIO(data2))\n\n\nCreate a Datacompy Compare Instance to Compare df1 and df2\n\ncompare = datacompy.Compare(\n    df1,\n    df2,\n    join_columns=['id', 'col1_string'],  # Key columns, can be single or list\n    abs_tol=0,                           # Optional, defaults to 0\n    rel_tol=0,                           # Optional, defaults to 0\n    df1_name='Base',                     # Optional, defaults to 'df1'\n    df2_name='Compare'                   # Optional, defaults to 'df2'\n)\n\n\n\nCreate a New DataCompyReport Instance\n\nreport = DatacompyReport(compare)\nreport\n\n datacompy_report instance:\n Comparing: Base and Compare\n\n\nThe .compare_instance attribute is the datacompy.core.Compare object. datacompy.core.Compare attributes can be accessed directly.\n\nfor item in dir(report.compare_instance):\n    if item[0] != '_':\n        print(f'report.compare_instance.{item}')\n\nreport.compare_instance.abs_tol\nreport.compare_instance.all_columns_match\nreport.compare_instance.all_mismatch\nreport.compare_instance.all_rows_overlap\nreport.compare_instance.cast_column_names_lower\nreport.compare_instance.column_stats\nreport.compare_instance.count_matching_rows\nreport.compare_instance.df1\nreport.compare_instance.df1_name\nreport.compare_instance.df1_unq_columns\nreport.compare_instance.df1_unq_rows\nreport.compare_instance.df2\nreport.compare_instance.df2_name\nreport.compare_instance.df2_unq_columns\nreport.compare_instance.df2_unq_rows\nreport.compare_instance.ignore_case\nreport.compare_instance.ignore_spaces\nreport.compare_instance.intersect_columns\nreport.compare_instance.intersect_rows\nreport.compare_instance.intersect_rows_match\nreport.compare_instance.join_columns\nreport.compare_instance.matches\nreport.compare_instance.on_index\nreport.compare_instance.rel_tol\nreport.compare_instance.report\nreport.compare_instance.sample_mismatch\nreport.compare_instance.subset\n\n\n\nView Modified Matched Differences Report\nDatacompy provides most of the methods and attributes necessary to create a very useful comparison of two DataFrames. For some particular use cases though it is helpful to represent the data where matches on key columns are found but at least one difference exists (by value and/or by type) in a column they both share. Further, there is no added value reporting values in columns where the two DataFrames match for this use case so matching values are blanked out.\nTo create such a table: report.prepare_compare_results()\n\nreport.prepare_compare_results()\n\n\n\n\n\n  \n    \n      \n      \n      col2_string_df1\n      col2_string_df2\n      col3_int_df1\n      col3_int_df2\n      col4_float_df1\n      col4_float_df2\n    \n    \n      id\n      col1_string\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      210\n      g2\n      \n      \n      3.0\n      4.0\n      3.2\n      3.3\n    \n    \n      410\n      g1\n      g1-goat\n      g1-dog\n      \n      \n      5.4\n      5.9\n    \n    \n      610\n      g2\n      g2-dog\n      g2-goat\n      \n      \n      7.6\n      NaN\n    \n  \n\n\n\n\n\n\nCreate Excel Report\nTo create an Excel report, use report.create_excel_report('comparison_report_test_data.xlsx').\nThe workbook will contain multiple sheets:\n\nRow Summary - overall comparison of DataFrame1 and DataFrame2 by row\nColumn Summary - overall comparison of DataFrame1 and DataFrame2 by row\nColumns Stats Summary - overall comparison of column metadata for DataFrame1 and DataFrame2\nDataFrame1 Observations Only - all rows (by key as defined by self.compare_instance.join_columns) found in DataFrame 1 but not DataFrame 2\nDataFrame2 Observations Only - all rows (by key as defined by self.compare_instance.join_columns) found in DataFrame 2 but not DataFrame 1\nMatched Differences - all rows (by key as defined by self.compare_instance.join_columns) found in both DataFrame1 and DataFrame2 having at least one difference in a non-key field. The Matched Differences DataFrame replaces all fields where the DataFrames match with blanks by using report.prepare_compare_results()\n\n\nreport.create_excel_report('comparison_report_test_data.xlsx')\n\nExcel Workbook has been created"
  }
]